namespace FocusDock.Data.Models;

using System.ComponentModel;

/// <summary>
/// Represents a single to-do item or task
/// </summary>
public class TodoItem
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    
    /// <summary>
    /// Priority level: 1=Low, 2=Medium, 3=High, 4=Urgent
    /// </summary>
    public int Priority { get; set; } = 2;
    
    public bool IsCompleted { get; set; } = false;
    
    /// <summary>
    /// Optional due date
    /// </summary>
    public DateTime? DueDate { get; set; }
    
    /// <summary>
    /// Date task was created
    /// </summary>
    public DateTime CreatedDate { get; set; } = DateTime.Now;
    
    /// <summary>
    /// Date task was completed
    /// </summary>
    public DateTime? CompletedDate { get; set; }
    
    /// <summary>
    /// Source: "User", "Canvas", "Study Plan"
    /// </summary>
    public string Source { get; set; } = "User";
    
    /// <summary>
    /// Related Canvas assignment ID if applicable
    /// </summary>
    public string? CanvasAssignmentId { get; set; }
    
    /// <summary>
    /// Related Canvas course ID if applicable
    /// </summary>
    public string? CanvasCourseId { get; set; }
    
    /// <summary>
    /// Tags for organization
    /// </summary>
    public List<string> Tags { get; set; } = new();
    
    /// <summary>
    /// Estimated time in minutes to complete
    /// </summary>
    public int? EstimatedMinutes { get; set; }
    
    /// <summary>
    /// Actual time spent in minutes
    /// </summary>
    public int? ActualMinutes { get; set; }
    
    /// <summary>
    /// Show reminder notification
    /// </summary>
    public bool ShowReminder { get; set; } = true;
    
    /// <summary>
    /// Repeat: "None", "Daily", "Weekly", "Biweekly"
    /// </summary>
    public string Repeat { get; set; } = "None";

    public bool IsOverdue()
    {
        return !IsCompleted && DueDate.HasValue && DateTime.Now > DueDate.Value.AddDays(1);
    }

    public bool IsDueSoon(TimeSpan within)
    {
        return !IsCompleted && DueDate.HasValue && 
               DueDate.Value > DateTime.Now && 
               DueDate.Value <= DateTime.Now.Add(within);
    }

    public int? DaysDueIn()
    {
        if (!DueDate.HasValue) return null;
        return (int)(DueDate.Value - DateTime.Now).TotalDays;
    }

    public string PriorityName => Priority switch
    {
        1 => "Low",
        2 => "Medium",
        3 => "High",
        4 => "Urgent",
        _ => "Unknown"
    };
}

/// <summary>
/// Represents a study plan generated by AI
/// </summary>
public class StudyPlan
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    
    /// <summary>
    /// Date plan was generated
    /// </summary>
    public DateTime CreatedDate { get; set; } = DateTime.Now;
    
    /// <summary>
    /// Associated Canvas course or assignment IDs
    /// </summary>
    public List<string> RelatedItems { get; set; } = new();
    
    /// <summary>
    /// Tasks generated for this plan
    /// </summary>
    public List<string> TaskIds { get; set; } = new();
    
    /// <summary>
    /// Suggested study sessions (time ranges)
    /// </summary>
    public List<StudySession> Sessions { get; set; } = new();
    
    public DateTime? StartDate { get; set; }
    public DateTime? TargetCompleteDate { get; set; }
    
    /// <summary>
    /// Estimated total study hours needed
    /// </summary>
    public double EstimatedHours { get; set; } = 5.0;
    
    /// <summary>
    /// AI model used for generation (e.g., "gpt-4", "claude-3")
    /// </summary>
    public string AiModel { get; set; } = "claude-3";
}

/// <summary>
/// Single study session recommendation
/// </summary>
public class StudySession
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public string Subject { get; set; } = string.Empty;
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public string Topic { get; set; } = string.Empty;
    public string Technique { get; set; } = "Pomodoro"; // Pomodoro, DeepWork, Spaced Repetition
    public int BreakMinutes { get; set; } = 5;
    public int BreaksTaken { get; set; } = 0;
    public int? EffectivenessRating { get; set; }
    public string Notes { get; set; } = string.Empty;

    public int DurationMinutes
    {
        get => (int)(EndTime - StartTime).TotalMinutes;
    }
}

/// <summary>
/// Study session history for analytics
/// </summary>
public class StudySessionLog
{
    public string Id { get; set; } = Guid.NewGuid().ToString();
    public DateTime StartTime { get; set; }
    public DateTime? EndTime { get; set; }
    public string Topic { get; set; } = string.Empty;
    public string Subject { get => Topic; set => Topic = value; } // Alias for UI compatibility
    public string RelatedTaskId { get; set; } = string.Empty;
    public int MinutesSpent { get; set; } = 0;
    public int DurationMinutes { get => MinutesSpent; set => MinutesSpent = value; } // Alias for UI compatibility
    public DateTime SessionEndTime { get => EndTime ?? DateTime.Now; } // Alias for UI compatibility
    public int BreaksTaken { get; set; } = 0;
    
    /// <summary>
    /// Subjective rating: 1-5 stars
    /// </summary>
    public int? EffectivenessRating { get; set; }
    
    public string Notes { get; set; } = string.Empty;

    public bool IsActive()
    {
        return EndTime == null;
    }

    public int ElapseMinutes()
    {
        var end = EndTime ?? DateTime.Now;
        return (int)(end - StartTime).TotalMinutes;
    }
}
